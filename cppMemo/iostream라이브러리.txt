--------------<iostream>------------

iostream은 "Input Output Stream"의 줄임말로, C++에서 입출력을 다루는 라이브러리

사용법 : #include <iostream>
#include <iostream>은 C++의 표준 라이브러리 중 하나인 iostream 헤더 파일을 
프로그램에 포함시킨다는 의미.


-----------구현 가능 기능들---------------

****************************************
***전에 c++에서의 객체와 js에서의 객체 차이**

이름은 똑같지만 다름!
개념적인 차이:
JavaScript에서의 객체는 프로퍼티와 메서드를 포함하는 일종의 컨테이너로, 프로퍼티는 이름-값 쌍으로 구성되며, 
값은 어떤 타입이든 될 수 있습니다. 또한 JavaScript에서는 객체의 프로퍼티나 메서드를 동적으로 추가, 수정, 삭제할 수 있습니다.

 반면에 C++에서의 객체는 데이터와 그 데이터를 조작하는 함수(메서드)를 캡슐화한 것으로, 객체를 정의할 때는 데이터와 함수를 명시하고, 이들을 하나의 클래스 내에 정의

>>>>즉, JavaScript에서의 객체는 비교적 자유롭게 프로퍼티와 메서드를 추가하거나 변경할 수 있지만,

 C++에서의 객체는 클래스로부터 만들어지며, 클래스에 정의된 메서드를 사용하여 객체를 조작

--------다시<iostream>--------------
#기본
#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

-로직 : << 연산자를 통해 
문자열 "Hello, world!"가 cout 객체에 전달
 콘솔에 출력

-세부내용:
std::cout은 C++에서 표준 출력 스트림을 나타내는 객체

cout은 std 네임스페이스 내부의 ostream 클래스의 객체. ostream은 출력 스트림을 다루기 위한 클래스이며, cout 객체는 ostream 클래스를 상속받아 구현

--------어 그러면 네임스페이스란---------

1) Namespace 

네임스페이스는 이름 충돌을 방지하기 위해
 클래스, 함수, 변수 등을 하나의 이름 공간에 묶어서 관리합니다. 이를 통해 이름 충돌방지.

 C++에서는 다양한 라이브러리들이 사용할 수 있도록, std, boost, Qt 등 다양한 네임스페이스를 제공합니다. 

예를 들어, std::cout는 C++ 표준 라이브러리인 iostream의 !출력 객체!인 cout을 std라는 네임스페이스 내에 포함시킨 것입니다



1. 데이터 입력: cin 객체를 사용하여 
사용자로부터 키보드나 파일에서 데이터를 
입력받을 수 있습니다.

int num;
std::cin >> num; 

---- >> 연산자
>> 연산자는 입력 스트림에서 값을 읽어들이는 역할을 합니다.  num 변수는 사용자로부터 입력받은 값으로 대체.
 입력 스트림에서 값이 제대로 읽혀들이지 않은 경우, 예외를 발생

--string을 입력받고 싶으면?
->std::getline() 함수를 사용(<string>사용)
#include <string>

std::string 받을 문자열 이름;
std::getline(std::cin, 받을 문자열 이름);

std::getline() 은
std::cin 객체로부터 입력받은 문자열을 std::string 형태로 str 변수에 저장

2. 데이터 출력: cout 객체를 사용하여 
데이터를 콘솔에 출력

int num = 10;
std::cout << "num의 값: " << num << std::endl; 

로직 :
 << 연산자를 통해 
 ""num의 값: "이 cout 객체에 전달
 콘솔에 출력

세부내용:
 std::endl은 출력버퍼를 비우고 개행문자를 출력.

개행문자는 출력문의 가독성을 높이기 위해 사용. 
출력할 데이터의 끝에 개행문자를 추가하면, 
다음 출력문이 다음 줄부터 시작되어 출력됩니다. 
이렇게 함으로써 출력문 사이의 간격을 유지

3.에러 출력: cerr 객체를 사용하여 
에러 메시지를 출력

4.파일 입출력: fstream 클래스를 사용하여
 파일에서 데이터를 읽어오거나
 파일에 데이터를 사용.


5.문자열 입출력: getline() 함수를 사용하여 문자열을 입력받기.




















